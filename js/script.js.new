// Constants
const ITEMS_PER_PAGE = 6;

// Tool Data
const tools = [
    { 
        name: 'CGPA to Percentage Calculator',
        url: 'calculator/cgpa-percentage-inline.html',
        tags: ['calculator', 'study']
    },
    { 
        name: 'IVF Due Date Calculator',
        url: 'health/ivf-calculator.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Pregnancy Weight Gain Calculator',
        url: 'health/pregnancy-weight.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Steps to KM Converter',
        url: 'converter/steps-to-km-inline.html',
        tags: ['converter', 'health']
    },
    { 
        name: 'Typing Speed Test Paragraph',
        url: 'study/typing-speed.html',
        tags: ['utility', 'study']
    },
    { 
        name: 'Calories Burned Walking',
        url: 'health/calories-walking.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Height Conversion Tool',
        url: 'converter/height-converter-inline.html',
        tags: ['converter', 'health']
    },
    { 
        name: 'Calorie Deficit Finder',
        url: 'health/calorie-deficit.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Body Frame Size Calculator',
        url: 'health/body-frame-inline.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Exam Marks Percentage Calculator',
        url: 'calculator/exam-percentage-inline.html',
        tags: ['calculator', 'study']
    },
    { 
        name: 'Debt to Income Ratio Tool',
        url: 'finance/debt-ratio.html',
        tags: ['calculator', 'finance']
    },
    { 
        name: 'Age Difference Calculator',
        url: 'personal/age-difference-inline.html',
        tags: ['calculator', 'personal']
    },
    { 
        name: 'DPI Checker',
        url: 'utility/dpi-checker.html',
        tags: ['utility', 'design']
    },
    { 
        name: 'Study Planner',
        url: 'study/study-planner.html',
        tags: ['planner', 'study']
    },
    { 
        name: 'Marriage Age Calculator',
        url: 'personal/marriage-age-inline.html',
        tags: ['calculator', 'personal']
    },
    { 
        name: 'Calories in Food Checker',
        url: 'health/food-calories.html',
        tags: ['calculator', 'health']
    },
    { 
        name: 'Pomodoro Timer',
        url: 'planner/pomodoro.html',
        tags: ['utility', 'study']
    },
    { 
        name: 'Daily Expense Tracker',
        url: 'finance/expense-tracker.html',
        tags: ['planner', 'finance']
    },
    { 
        name: 'GPA to Percentage Calculator',
        url: 'calculator/gpa-percentage-inline.html',
        tags: ['calculator', 'study']
    },
    { 
        name: 'Marriage Biodata',
        url: 'personal/marriage-biodata-inline.html',
        tags: ['utility', 'personal']
    },
    { 
        name: 'Invite Generator',
        url: 'personal/invite-generator-inline.html',
        tags: ['utility', 'personal']
    },
    { 
        name: 'Goal Planner',
        url: 'planner/goal-planner.html',
        tags: ['planner', 'personal']
    },
    { 
        name: 'Protein Intake Calculator',
        url: 'health/protein-intake.html',
        tags: ['health', 'calculator']
    }
];

// State
let currentPage = 1;
let currentTag = 'all';
let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');

// DOM Elements
const sidebar = document.querySelector('.sidebar');
const menuToggle = document.querySelector('.menu-toggle');
const menuClose = document.querySelector('.sidebar-close');
const overlay = document.querySelector('.overlay');
const toolsGrid = document.querySelector('.tools-grid');
const searchInput = document.querySelector('.search-input');
const favoritesList = document.querySelector('.favorites-container');
const tagsNav = document.querySelector('.tags-nav');

// Mobile search elements
const searchToggle = document.querySelector('.search-toggle');
const mobileSearchContainer = document.querySelector('.mobile-search-container');
const mobileSearchInput = document.querySelector('.mobile-search-input');
const mobileSearchClose = document.querySelector('.mobile-search-close');
const searchResults = document.querySelector('.search-results');

// Event Listeners
menuToggle?.addEventListener('click', toggleSidebar);
menuClose?.addEventListener('click', closeSidebar);
overlay?.addEventListener('click', closeSidebar);
searchInput?.addEventListener('input', handleSearch);

// Desktop search focus/blur events for tool pages
searchInput?.addEventListener('focus', function() {
    // If we're on a tool page and there's a query, show results
    if (!document.querySelector('.tools-grid') && this.value.trim()) {
        const query = this.value.toLowerCase().trim();
        const matchedTools = tools.filter(tool => 
            tool.name.toLowerCase().includes(query) ||
            tool.tags.some(tag => tag.toLowerCase().includes(query))
        );
        renderSearchResults(matchedTools, query);
    }
});

searchInput?.addEventListener('blur', function() {
    // Give time for click events to register before hiding results
    setTimeout(() => {
        document.querySelector('.search-results')?.classList.remove('active');
    }, 200);
});

// Mobile search
searchToggle?.addEventListener('click', toggleMobileSearch);
mobileSearchClose?.addEventListener('click', closeMobileSearch);
mobileSearchInput?.addEventListener('input', handleMobileSearch);

// Tag navigation
document.querySelectorAll('.tag-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const tag = this.getAttribute('data-tag');
        filterByTag(tag);
        
        // Update active state in both navs
        document.querySelectorAll('.tag-btn').forEach(b => {
            b.classList.toggle('active', b.getAttribute('data-tag') === tag);
        });
    });
});

// Horizontal tag scroll buttons
const scrollLeftBtn = document.querySelector('.scroll-left');
const scrollRightBtn = document.querySelector('.scroll-right');
const tagsScroll = document.querySelector('.tags-scroll');

if (scrollLeftBtn && scrollRightBtn && tagsScroll) {
    scrollLeftBtn.addEventListener('click', () => {
        tagsScroll.scrollBy({ left: -200, behavior: 'smooth' });
    });
    
    scrollRightBtn.addEventListener('click', () => {
        tagsScroll.scrollBy({ left: 200, behavior: 'smooth' });
    });
}

// Initialize
window.addEventListener('DOMContentLoaded', () => {
    // Set initial tool list
    renderTools();
    updateFavorites();
    
    // Check for active tags in URL
    const urlParams = new URLSearchParams(window.location.search);
    const tagParam = urlParams.get('tag');
    if (tagParam) {
        filterByTag(tagParam);
        document.querySelectorAll('.tag-btn').forEach(b => {
            b.classList.toggle('active', b.getAttribute('data-tag') === tagParam);
        });
    }
});

// Functions
function toggleSidebar() {
    sidebar.classList.toggle('active');
    overlay.classList.toggle('active');
    document.body.classList.toggle('no-scroll');
}

function closeSidebar() {
    sidebar.classList.remove('active');
    overlay.classList.remove('active');
    document.body.classList.remove('no-scroll');
}

function toggleMobileSearch() {
    mobileSearchContainer.classList.add('active');
    setTimeout(() => mobileSearchInput.focus(), 300);
}

function closeMobileSearch() {
    mobileSearchContainer.classList.remove('active');
    searchResults.classList.remove('active');
    mobileSearchInput.value = '';
}

function handleSearch(e) {
    const query = e.target.value.toLowerCase().trim();
    
    // Only show results if there's something to search for
    if (query) {
        const matchedTools = tools.filter(tool => 
            tool.name.toLowerCase().includes(query) ||
            tool.tags.some(tag => tag.toLowerCase().includes(query))
        );
        renderSearchResults(matchedTools, query);
    } else {
        document.querySelector('.search-results')?.classList.remove('active');
    }
}

function handleMobileSearch(e) {
    const query = e.target.value.toLowerCase().trim();
    
    if (query) {
        const matchedTools = tools.filter(tool => 
            tool.name.toLowerCase().includes(query) ||
            tool.tags.some(tag => tag.toLowerCase().includes(query))
        );
        renderMobileSearchResults(matchedTools, query);
    } else {
        searchResults.classList.remove('active');
    }
}

function renderSearchResults(matchedTools, query) {
    const resultsContainer = document.querySelector('.search-results');
    if (!resultsContainer) return;
    
    resultsContainer.innerHTML = '';
    resultsContainer.classList.add('active');
    
    if (matchedTools.length === 0) {
        resultsContainer.innerHTML = '<p class="no-results">No tools found matching your search.</p>';
        return;
    }
    
    const limitedResults = matchedTools.slice(0, 5); // Limit to 5 results
    
    limitedResults.forEach(tool => {
        const resultItem = document.createElement('a');
        resultItem.href = tool.url;
        resultItem.className = 'search-result-item';
        
        // Highlight the matched text
        const nameWithHighlight = highlightMatch(tool.name, query);
        
        resultItem.innerHTML = `
            <span class="result-name">${nameWithHighlight}</span>
            <span class="result-tags">${tool.tags.join(', ')}</span>
        `;
        
        resultsContainer.appendChild(resultItem);
    });
    
    if (matchedTools.length > 5) {
        const moreResults = document.createElement('p');
        moreResults.className = 'more-results';
        moreResults.textContent = `+ ${matchedTools.length - 5} more results...`;
        resultsContainer.appendChild(moreResults);
    }
}

function renderMobileSearchResults(matchedTools, query) {
    searchResults.innerHTML = '';
    searchResults.classList.add('active');
    
    if (matchedTools.length === 0) {
        searchResults.innerHTML = '<p class="no-results">No tools found matching your search.</p>';
        return;
    }
    
    matchedTools.forEach(tool => {
        const resultItem = document.createElement('a');
        resultItem.href = tool.url;
        resultItem.className = 'search-result-item';
        
        // Highlight the matched text
        const nameWithHighlight = highlightMatch(tool.name, query);
        
        resultItem.innerHTML = `
            <span class="result-name">${nameWithHighlight}</span>
            <span class="result-tags">${tool.tags.join(', ')}</span>
        `;
        
        searchResults.appendChild(resultItem);
    });
}

function highlightMatch(text, query) {
    const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
}

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function filterByTag(tag) {
    currentTag = tag;
    currentPage = 1; // Reset to first page when changing tags
    renderTools();
    
    // Update URL with the tag parameter without reloading the page
    const url = new URL(window.location);
    if (tag === 'all') {
        url.searchParams.delete('tag');
    } else {
        url.searchParams.set('tag', tag);
    }
    window.history.pushState({}, '', url);
}

function renderTools() {
    if (!toolsGrid) return;
    
    // Filter tools by tag
    const filteredTools = currentTag === 'all' 
        ? tools 
        : tools.filter(tool => tool.tags.includes(currentTag));
    
    // Calculate pagination
    const totalPages = Math.ceil(filteredTools.length / ITEMS_PER_PAGE);
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const paginatedTools = filteredTools.slice(startIndex, endIndex);
    
    // Clear existing content
    toolsGrid.innerHTML = '';
    
    if (paginatedTools.length === 0) {
        toolsGrid.innerHTML = '<p class="no-tools">No tools found in this category.</p>';
        document.querySelector('.pagination').innerHTML = '';
        return;
    }
    
    // Render tool cards
    paginatedTools.forEach(tool => {
        const toolCardTemplate = document.getElementById('tool-card-template');
        const toolCardClone = document.importNode(toolCardTemplate.content, true);
        
        const toolLink = toolCardClone.querySelector('.tool-link');
        const toolTitle = toolCardClone.querySelector('.tool-title');
        const favoriteBtn = toolCardClone.querySelector('.favorite-btn');
        
        toolLink.href = tool.url;
        toolTitle.textContent = tool.name;
        
        // Set favorite status
        const isFavorite = favorites.some(fav => fav.url === tool.url);
        if (isFavorite) {
            favoriteBtn.classList.add('active');
        }
        
        // Add tag classes for filtering via CSS if needed
        const toolCard = toolCardClone.querySelector('.tool-card');
        tool.tags.forEach(tag => toolCard.classList.add(`tag-${tag}`));
        
        // Toggle favorite
        favoriteBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            toggleFavorite(tool);
            favoriteBtn.classList.toggle('active');
        });
        
        toolsGrid.appendChild(toolCardClone);
    });
    
    // Render pagination
    renderPagination(totalPages);
}

function renderPagination(totalPages) {
    const paginationContainer = document.querySelector('.pagination');
    if (!paginationContainer) return;
    
    paginationContainer.innerHTML = '';
    
    if (totalPages <= 1) {
        return; // No pagination needed for just one page
    }
    
    // Previous button
    const prevButton = document.createElement('button');
    prevButton.className = 'page-btn prev-btn';
    prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderTools();
            window.scrollTo(0, 0);
        }
    });
    paginationContainer.appendChild(prevButton);
    
    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `page-btn ${i === currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => {
            currentPage = i;
            renderTools();
            window.scrollTo(0, 0);
        });
        paginationContainer.appendChild(pageButton);
    }
    
    // Next button
    const nextButton = document.createElement('button');
    nextButton.className = 'page-btn next-btn';
    nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
    nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            renderTools();
            window.scrollTo(0, 0);
        }
    });
    paginationContainer.appendChild(nextButton);
}

function toggleFavorite(tool) {
    const index = favorites.findIndex(fav => fav.url === tool.url);
    
    if (index === -1) {
        // Add to favorites
        favorites.push(tool);
    } else {
        // Remove from favorites
        favorites.splice(index, 1);
    }
    
    // Update localStorage
    localStorage.setItem('favorites', JSON.stringify(favorites));
    
    // Update favorites list
    updateFavorites();
}

function updateFavorites() {
    if (!favoritesList) return;
    
    if (favorites.length === 0) {
        favoritesList.innerHTML = '<p class="no-favorites">No favorite tools yet.</p>';
        return;
    }
    
    favoritesList.innerHTML = '';
    
    favorites.forEach(tool => {
        const favoriteItem = document.createElement('a');
        favoriteItem.href = tool.url;
        favoriteItem.className = 'favorite-item';
        
        favoriteItem.innerHTML = `
            <span class="favorite-name">${tool.name}</span>
            <button class="remove-favorite" aria-label="Remove from favorites">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        const removeBtn = favoriteItem.querySelector('.remove-favorite');
        removeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            toggleFavorite(tool);
            
            // Also update any visible tool cards
            document.querySelectorAll('.tool-card').forEach(card => {
                const cardLink = card.closest('.tool-link');
                if (cardLink && cardLink.href.endsWith(tool.url)) {
                    card.querySelector('.favorite-btn').classList.remove('active');
                }
            });
        });
        
        favoritesList.appendChild(favoriteItem);
    });
}
